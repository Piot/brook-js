class OutBitStream{constructor(t){this.array=new Uint8Array(512),this.arrayIndex=0,this.bitCountWritten=0,this.position=0,this.accumulator=0}_writeBits(t,i){if(t<0)throw"must write positive numbers";if(!Number.isInteger(i))throw`bitcount ${i} must be integer`;if(!Number.isInteger(t))throw"value must be integer";if(0==i)return;const e=32-this.bitCountWritten,r=Math.min(e,i),s=i-r;let n=t&4294967295>>>32-i;n>>=s,n<<=e-r,this.accumulator|=n,this.bitCountWritten+=r,this.position+=r,32===this.bitCountWritten&&(this.array[this.arrayIndex++]=(4278190080&this.accumulator)>>24,this.array[this.arrayIndex++]=(16711680&this.accumulator)>>16,this.array[this.arrayIndex++]=(65280&this.accumulator)>>8,this.array[this.arrayIndex++]=255&this.accumulator,this.accumulator=0,this.bitCountWritten=0),s>0&&this._writeBits(t,s)}writeBits(t,i){this._writeBits(t,i)}writeUint8(t){this._writeBits(t,8)}writeUint16(t){this._writeBits(t,16)}writeUint32(t){this._writeBits(t,32)}writeSigned(t,i){if(!Number.isInteger(i))throw`signed bitcount ${i} must be integer`;if(i<=2)throw`bitcount must be at least integer 2 ${i}`;if(!Number.isInteger(t))throw`signed value ${t} must be integer`;const e=t<0;this._writeBits(e?1:0,1),this._writeBits(t,i-1)}copyArrayBuffer(t,i){return t.slice(0,i)}tell(){return this.position}close(){const t=Math.ceil(this.bitCountWritten/8);for(let i=0;i<t;++i){const t=24-8*i,e=255<<t,r=(this.accumulator&e)>>t;this.array[this.arrayIndex++]=r}return this.copyArrayBuffer(this.array,this.arrayIndex)}bitCount(){return this.position}}class OutOctetStream{constructor(){let t=new ArrayBuffer(1024),i=new DataView(t,0);this.view=i,this.position=0}writeUint8(t){this.view.setUint8(this.position,t,!1),this.position++}writeUint16(t){this.view.setUint16(this.position,t,!1),this.position+=2}writeUint32(t){this.view.setUint32(this.position,t,!1),this.position+=4}writeUint64(t){writeUint32(t),writeUint32(0)}writeOctets(t){for(let i=0;i<t.length;++i)this.writeUint8(t[i])}copyArrayBuffer(t,i){return t.slice(0,i)}close(){const t=this.copyArrayBuffer(this.view.buffer,this.position);return new Uint8Array(t)}}class InBitStream{constructor(t,i){if(!Number.isInteger(i))throw"bitcount must be integer";if(!(t instanceof Uint8Array))throw"Invalid octetArray. Must be Uint8Array";this.octetArrayIndex=0,this.position=0,this.remainingBitCount=0,this.bitCount=i,this.octetArray=t;const e=t.byteLength;if(this.octetCount=Math.ceil(i/8),this.octetCount>e)throw"strange octet buffer size"}_fillAccumulator(){const t=this.octetCount-this.octetArrayIndex,i=Math.min(4,t);this.accumulator=0;for(let t=0;t<i;++t){const i=24-8*t,e=this.octetArray[this.octetArrayIndex++]<<i;this.accumulator|=e}this.remainingBitCount=8*i}_readBits(t){if(0===this.remainingBitCount&&(this._fillAccumulator(),0===this.remainingBitCount))throw"Read too far";const i=Math.min(this.remainingBitCount,t),e=~(4294967295>>>i),r=32-i,s=(this.accumulator&e)>>>r;this.accumulator<<=i,this.remainingBitCount-=i,this.position+=i;const n=t-i;return n>0?s<<n|this._readBits(n):s}tell(){return this.position}readBits(t){return this._readBits(t)}readUint8(){return this._readBits(8)}readInt8(){return this.readSigned(8)}readUint16(){return this._readBits(16)}readInt16(){return this.readSigned(16)}readUint32(){return this._readBits(32)}readInt32(){return this.readSigned(32)}readSigned(t){const i=this._readBits(1);let e=this._readBits(t-1);return i&&(e=-e),e}}class InOctetStream{constructor(t){t instanceof Uint8Array&&(t=t.buffer),this.buffer=t;let i=new DataView(this.buffer,0);this.view=i,this.position=0}readUint8(){const t=this.view.getUint8(this.position);return this.position++,t}readUint16(){const t=this.view.getUint16(this.position,!1);return this.position+=2,t}readUint32(){const t=this.view.getUint32(this.position,!1);return this.position+=4,t}readOctets(t){const i=this.buffer.slice(this.position,this.position+t),e=new Uint8Array(i);return this.position+=t,e}readUint64(t){readUint32(t),readUint32(0)}}class DebugInBitStream{constructor(t){this.bitStream=t}checkType(t,i){var e=this.bitStream.readBits(4),r=this.bitStream.readBits(7);if(e!==t)throw`Expected type ${t} received ${e}`;if(r!==i)throw`Expected bitcount ${i} received ${r}`}tell(){return this.bitStream.tell()}readBits(t){return this.checkType(7,t),this.bitStream.readBits(t)}readUint8(){return this.checkType(5,8),this.bitStream.readUint8()}readInt8(){throw"not implemented readInt8"}readUint16(){return this.checkType(1,16),this.bitStream.readUint16()}readInt16(){return this.checkType(2,16),this.bitStream.readInt16()}readUint32(){return this.checkType(3,32),this.bitStream.readUint32()}readInt32(){throw"not implemented readInt32"}readSigned(t){return this.checkType(6,t),this.bitStream.readSigned(t)}}export{OutBitStream,OutOctetStream,InBitStream,InOctetStream,DebugInBitStream};